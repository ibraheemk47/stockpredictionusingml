plotPredAcc()
plotBoth() = function()
{
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
}
plotBoth = function()
{
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
}
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
plotBoth()
plotAcc()
plotPredAcc()
plotPredAcc()
plotAcc()
plotBoth()
plotBoth = function()
{
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
par(mfrow=c(1,1))
}
my_summary()
plotBoth()
plotAcc()
plotPredAcc()
plotBoth()
install.packages('rvest')
library(rvest)
url = "http://www.math.utah.edu/~alfeld/math/largeprime.html"
data = read_html(url)
head(head)
head(data)
head
data
length(data)
str(data)
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
summary()
my_summary()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Average Predictive Performance",xlim = as.character(c(1,5)),ylim = c(80,100))
}
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Average Predictive Performance",xlim = c(1,5),ylim = c(80,100))
axis(1, at=1:10, labels=letters[1:10])
}
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
pav()
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
}
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
legend('bottomleft',"Accuracy",fill = 'red')
}
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
legend('bottomleft',"Accuracy  ",fill = 'red')
with(LifeCycleSavings[1:9,], text(sr~dpi, labels = row.names(LifeCycleSavings[1:9,]), pos = 4))
}
pavg()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
results
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
plotAcc()
plotPredAcc()
source('D:/GitHub/StockMarketPrediction/perform.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
prredBoth()
predBoth()
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plot(Both)
plotBoth()
plotAcc()
plotPredAcc()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
pavg()
pall()
pavg()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth
my_summary()
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
source('D:/GitHub/StockMarketPrediction/vaishu.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
#Plotting all data
qplot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
?qplot
#Plotting all data
ggplot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
library(ggplot2)
#Plotting all data
ggplot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
ggplot(data$Close,type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
libarry(plotly)
install.packages('plotly')
library(plotly)
#Plotting all data
plot_ly(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
plot_ly(data$Close,type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
plot_ly(data,type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
plot_ly(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2",mode='lines')
plot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('liquidSVM',configure.args="native C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin\",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
remove.packages('liquidSVM')
library(liquidSVM)
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
library(liquidSVM)
remove.packages('liquidSVM')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
library(liquidSVM)
remove.packages('liquidSVM')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/")
library(liquidSVM)
?lsSVM
source('D:/GitHub/StockMarketPrediction/achyutha.R')
vignette('demo',package='liquidSVM')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
library(liquidSVM)
remove.packages('liquidSVM')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
library("liquidSVM", lib.loc="~/R/win-library/3.5")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
library("liquidSVM", lib.loc="~/R/win-library/3.5")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
unlink('liquidSVM')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
Sys.time()
Sys.time() - Sys.time()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
y
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
res = end-start
res
str(res)
as.character(res)
res$difftime
res$units
res
print(res)
res = end - start
cat("\t","Execution Time","\t",print(res),"\n")
cat("\t","Execution Time","\t",print(res),"\n")
res
cat("\t","Execution Time","\t", res,"\n")
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
res = end - start
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
res = end - start
cat("\t")
print(res)
cat("\t","No. of days predicte
res = end - start
cat("\t")
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
res = end - start
cat("\t")
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
res = end - start
cat("\t ")
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
msft = c(98.6,98.9,97.9,89.7,71.2)
ibm = c(99.4,99.5,99.4,99.2,99.3)
mmm = c(99.8,99.3,`99.4,95,85.84)
ko =  c(99.5,99.6,99.4,99.4,99.2)
mcd = c(98.7,99,98.8,96.4,90.8)
intc = c(98.8,99.1,99.2,87.4,79.1)
nke = c(99.2,98.4,99.3,99,97.4)
aapl = c(97,99,98.8,98.6,90.1)
csco = c(97.9,98.4,99.3,99.2,90.9)
dis = c(97.9,99,98,97.5,98.9)
results = data.frame(msft,ibm,mmm,ko,mcd,intc,nke,aapl,csco,dis)
one = mean(as.numeric(results[1,]))
ten = mean(as.numeric(results[2,]))
thirty = mean(as.numeric(results[3,]))
sixty = mean(as.numeric(results[4,]))
ninety = mean(as.numeric(results[5,]))
C = c("red","lightblue","yellow","orange","darkcyan","pink","green","brown","purple","blue")
thick = 2
x = 1
pall = function()
{
plot(msft,type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Individual Predictive Performance",xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
points(ibm,type='b',col=C[2],lwd=thick,pch=x)
points(mmm,type='b',col=C[3],lwd=thick,pch=x)
points(ko,type='b',col=C[4],lwd=thick,pch=x)
points(mcd,type='b',col=C[5],lwd=thick,pch=x)
points(intc,type='b',col=C[6],lwd=thick,pch=x)
points(nke,type='b',col=C[7],lwd=thick,pch=x)
points(aapl,type='b',col=C[8],lwd=thick,pch=x)
points(csco,type='b',col=C[9],lwd=thick,pch=x)
points(dis,type='b',col=C[10],lwd=thick,pch=x)
names = c("Microsoft","IBM","3M","Coca Cola","McDonald's","Intel","Nike","Apple","Cisco","Disney")
legend('bottomleft',names,fill = C)
}
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
legend('bottomleft',"Accuracy  ",fill = 'red')
}
source('D:/GitHub/StockMarketPrediction/perform.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
msft = c(98.6,98.9,97.9,89.7,71.2)
ibm = c(99.4,99.5,99.4,99.2,99.3)
mmm = c(99.8,99.3,`99.4,95,85.84)
ko =  c(99.5,99.6,99.4,99.4,99.2)
mcd = c(98.7,99,98.8,96.4,90.8)
intc = c(98.8,99.1,99.2,87.4,79.1)
nke = c(99.2,98.4,99.3,99,97.4)
aapl = c(97,99,98.8,98.6,90.1)
csco = c(97.9,98.4,99.3,99.2,90.9)
dis = c(97.9,99,98,97.5,98.9)
results = data.frame(msft,ibm,mmm,ko,mcd,intc,nke,aapl,csco,dis)
one = mean(as.numeric(results[1,]))
ten = mean(as.numeric(results[2,]))
thirty = mean(as.numeric(results[3,]))
sixty = mean(as.numeric(results[4,]))
ninety = mean(as.numeric(results[5,]))
C = c("red","lightblue","yellow","orange","darkcyan","pink","green","brown","purple","blue")
thick = 2
x = 1
pall = function()
{
plot(msft,type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Individual Predictive Performance",xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
points(ibm,type='b',col=C[2],lwd=thick,pch=x)
points(mmm,type='b',col=C[3],lwd=thick,pch=x)
points(ko,type='b',col=C[4],lwd=thick,pch=x)
points(mcd,type='b',col=C[5],lwd=thick,pch=x)
points(intc,type='b',col=C[6],lwd=thick,pch=x)
points(nke,type='b',col=C[7],lwd=thick,pch=x)
points(aapl,type='b',col=C[8],lwd=thick,pch=x)
points(csco,type='b',col=C[9],lwd=thick,pch=x)
points(dis,type='b',col=C[10],lwd=thick,pch=x)
names = c("Microsoft","IBM","3M","Coca Cola","McDonald's","Intel","Nike","Apple","Cisco","Disney")
legend('bottomleft',names,fill = C)
}
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
legend('bottomleft',"Accuracy  ",fill = 'red')
}
source('D:/GitHub/StockMarketPrediction/perform.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
msft = c(98.6,98.9,97.9,89.7,71.2)
ibm = c(99.4,99.5,99.4,99.2,99.3)
mmm = c(99.8,99.3,99.4,95,85.84)
ko =  c(99.5,99.6,99.4,99.4,99.2)
mcd = c(98.7,99,98.8,96.4,90.8)
intc = c(98.8,99.1,99.2,87.4,79.1)
nke = c(99.2,98.4,99.3,99,97.4)
aapl = c(97,99,98.8,98.6,90.1)
csco = c(97.9,98.4,99.3,99.2,90.9)
dis = c(97.9,99,98,97.5,98.9)
results = data.frame(msft,ibm,mmm,ko,mcd,intc,nke,aapl,csco,dis)
one = mean(as.numeric(results[1,]))
ten = mean(as.numeric(results[2,]))
thirty = mean(as.numeric(results[3,]))
sixty = mean(as.numeric(results[4,]))
ninety = mean(as.numeric(results[5,]))
C = c("red","lightblue","yellow","orange","darkcyan","pink","green","brown","purple","blue")
thick = 2
x = 1
pall = function()
{
plot(msft,type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Individual Predictive Performance",xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
points(ibm,type='b',col=C[2],lwd=thick,pch=x)
points(mmm,type='b',col=C[3],lwd=thick,pch=x)
points(ko,type='b',col=C[4],lwd=thick,pch=x)
points(mcd,type='b',col=C[5],lwd=thick,pch=x)
points(intc,type='b',col=C[6],lwd=thick,pch=x)
points(nke,type='b',col=C[7],lwd=thick,pch=x)
points(aapl,type='b',col=C[8],lwd=thick,pch=x)
points(csco,type='b',col=C[9],lwd=thick,pch=x)
points(dis,type='b',col=C[10],lwd=thick,pch=x)
names = c("Microsoft","IBM","3M","Coca Cola","McDonald's","Intel","Nike","Apple","Cisco","Disney")
legend('bottomleft',names,fill = C)
}
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
legend('bottomleft',"Accuracy  ",fill = 'red')
}
pall()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
STAR_DATE
START_DATE
START_DATA
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
